### This file was generated by Nexus Schema
### Do not make changes to this file directly


input ClearRunInput {
  id: ID!
}

type Mutation {
  clearRun(input: ClearRunInput!): Run!
  clearRuns: Boolean!
  startRun(input: StartRunInput!): Run!
}

type Query {
  run(id: ID!): Run
  runs: [Run!]!
  testFile(id: ID!): TestFile
  testFiles: [TestFile!]!
}

type Run {
  id: ID!
  progress: Float!
  runTestFiles: [RunTestFile!]!
  status: Status!
  testSuites: [TestSuite!]!
}

type RunTestFile {
  duration: Int
  id: ID!
  status: Status!
  suites: [TestSuite!]!
  testFile: TestFile!
}

input StartRunInput {
  testFileIds: [String!]
}

enum Status {
  error
  idle
  in_progress
  success
}

type Subscription {
  runAdded: Run!
  runRemoved: Run!
  runUpdated: Run!
  testAdded(runId: String!): Test!
  testFileAdded: TestFile!
  testFileRemoved: TestFile!
  testFileUpdated: TestFile!
  testSuiteAdded(runId: String!): TestSuite!
  testSuiteUpdated(runId: String!): TestSuite!
  testUpdated(runId: String!): Test!
}

type Test {
  duration: Int
  error: TestError
  id: ID!
  status: Status!
  title: String!
}

type TestError {
  message: String!
  stack: String
}

type TestFile {
  deleted: Boolean!
  duration: Int
  id: ID!
  relativePath: String!
  status: Status!
}

type TestSuite {
  duration: Int
  id: ID!
  status: Status!
  testFile: TestFile!
  tests: [Test]!
  title: String!
}
